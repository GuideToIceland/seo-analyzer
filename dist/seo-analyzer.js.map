{"version":3,"file":"seo-analyzer.js","sources":["../src/rules/index.js","../src/rules/TitleLengthRule.js","../src/rules/ImgTagWithAltAttributeRule.js","../src/rules/ATagWithRelAttributeRule.js","../src/rules/CanonicalLinkRule.js","../src/rules/MetaBaseRule.js","../src/rules/MetaSocialRule.js","../src/modules/logger.js","../src/modules/scraper.js","../src/modules/input.js","../src/modules/analyzer.js","../src/modules/output.js","../src/server.js","../src/modules/next-server.js","../src/index.js"],"sourcesContent":["import titleLengthRule from './TitleLengthRule';\nimport imgTagWithAltAttributeRule from './ImgTagWithAltAttributeRule';\nimport aTagWithRelAttributeRule from './ATagWithRelAttributeRule';\nimport canonicalLinkRule from './CanonicalLinkRule';\nimport metaBaseRule from './MetaBaseRule';\nimport metaSocialRule from './MetaSocialRule';\n\nconst defaultRules = {\n  titleLengthRule,\n  imgTagWithAltAttributeRule,\n  aTagWithRelAttributeRule,\n  canonicalLinkRule,\n  metaBaseRule,\n  metaSocialRule\n};\n\nexport default defaultRules;\n","function titleLengthRule(dom, options) {\n  return new Promise(resolve => {\n    const document = dom.window.document;\n    const title = document.querySelector('title');\n    if (!title) {\n      resolve('This HTML is missing a <title> tag');\n    }\n    // If title exists in the DOM\n    const titleLength = title.length;\n    if (titleLength < options.min) {\n      resolve(\n        `<title> too short(${titleLength}). The minimum length should be ${options.min} characters.`\n      );\n    }\n    if (titleLength > options.max) {\n      resolve(\n        `<title> too long(${titleLength}). The maximum length should be ${options.max} characters.`\n      );\n    }\n    resolve(null);\n  });\n}\n\nexport default titleLengthRule;\n","function imgTagWithAltAttributeRule(dom) {\n  return new Promise(resolve => {\n    let countAlt = 0;\n    let countSrc = 0;\n    const report = [];\n    const elements = dom.window.document.querySelectorAll('img');\n\n    elements.forEach(element => {\n      if (!element.alt) {\n        countAlt++;\n      }\n      if (!element.src) {\n        countSrc++;\n      }\n    });\n\n    if (countSrc > 0) {\n      report.push(`There are ${countSrc} <img> tags without a src attribute`);\n    }\n\n    if (countAlt > 0) {\n      report.push(`There are ${countAlt} <img> tags without an alt attribute`);\n    }\n\n    if (countSrc || countAlt) {\n      resolve(report);\n    }\n\n    resolve(null);\n  });\n}\n\nexport default imgTagWithAltAttributeRule;\n","function ATagWithRelAttributeRule(dom) {\n  return new Promise(resolve => {\n    let count = 0;\n    const elements = dom.window.document.querySelectorAll('a');\n    elements.forEach(element => {\n      if (!element.rel) {\n        count++;\n      }\n    });\n    if (count > 0) {\n      resolve(`There are ${count} <a> tags without a rel attribute`);\n    }\n    resolve(null);\n  });\n}\n\nexport default ATagWithRelAttributeRule;\n","/**\n * Checks the presence and validity of the canonical link in the provided DOM.\n * @param {import('jsdom').JSDOM} dom The JSDOM object representing the HTML document.\n * @returns {Promise<string|null>} A promise that resolves with a string indicating an error message if\n * the canonical link is missing or invalid, otherwise resolves with null.\n */\nfunction canonicalLinkRule(dom) {\n  return new Promise(resolve => {\n    const element = dom.window.document.querySelector(\n      'head > link[rel=\"canonical\"]'\n    );\n    if (!element) {\n      resolve('This HTML is missing a <link rel=\"canonical\" href=\"...\"> link');\n    }\n    if (element && !element.href) {\n      resolve('The canonical link is missing an href attribute');\n    }\n    if (element && element.href.substr(-1) !== '/') {\n      resolve(\n        'The href attribute does not have a slash at the end of the link.'\n      );\n    }\n    resolve(null);\n  });\n}\n\nexport default canonicalLinkRule;\n","function metaBaseRule(dom, options = { list: [] }) {\n  return new Promise(resolve => {\n    const report = [];\n    if (options && options.names && options.names.length) {\n      options.names.forEach(name => {\n        const element = dom.window.document.querySelector(\n          `head > meta[name=\"${name}\"]`\n        );\n        if (!element) {\n          report.push(`This HTML is missing a <meta name=\"${name}\"> tag`);\n        } else if (!element.content) {\n          report.push(\n            `The content attribute for the <meta name=\"${name}\" content=\"\"> tag is empty`\n          );\n        }\n      });\n    }\n    resolve(report);\n  });\n}\n\nexport default metaBaseRule;\n","function metaSocialRule(dom, options = { properties: [] }) {\n  return new Promise(resolve => {\n    const report = [];\n    if (options && options.properties && options.properties.length) {\n      options.properties.forEach(property => {\n        const element = dom.window.document.querySelector(\n          `head > meta[property=\"${property}\"]`\n        );\n        if (!element) {\n          report.push(`This HTML is missing a <meta property=\"${property}\"> tag`);\n        } else if (!element.content) {\n          report.push(\n            `The content attribute for the <meta property=\"${property}\" content=\"\"> tag is empty`\n          );\n        }\n      });\n    }\n    resolve(report);\n  });\n}\n\nexport default metaSocialRule;\n","import CFonts from 'cfonts';\nimport _colors from 'colors';\n\nclass Logger {\n\n  /**\n   * @param {string} level\n   * @returns {Logger}\n   */\n  constructor(level) {\n    const levels = ['trace', 'debug', 'info', 'result', 'success', 'error'];\n    this.level = level === 'default' ? 2 : levels.indexOf(level);\n  }\n\n  /**\n   * Print formatted result to console\n   * @param {Array} - Array of reports\n   * @returns {Error} - Stop execution and print error\n   */\n  result(result, force = false) {\n    if (this.level > 3 && !force) {\n      return;\n    }\n    this._logResult(result);\n  }\n\n  /**\n   * Print error message to console\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   */\n  error(error, exit) {\n    if (this.level > 5) {\n      return;\n    }\n    this._logError(error);\n    if (exit) process.exit(1);\n  }\n\n  /**\n   * Print success message to console\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   */\n  success(success) {\n    if (this.level > 4) {\n      return;\n    }\n    this._logSuccess(success);\n  }\n\n  /**\n   * Print info message to console\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   */\n  info(info) {\n    if (this.level > 2) {\n      return;\n    }\n    this._logInfo(info);\n  }\n\n  /**\n   * Print beautiful message to console\n   * @param {String} - Result message\n   * @returns {String} - Print CFonts message to console\n   */\n  printTextToConsole(text) {\n    if (this.level > 2) {\n      return;\n    }\n    const formattedText = text.replace(' ', '|');\n    CFonts.say(formattedText, {\n      font: 'block', // define the font face\n      align: 'left', // define text alignment\n      colors: ['system'], // define all colors\n      background: 'transparent', // define the background color, you can also use `backgroundColor` here as key\n      letterSpacing: 1, // define letter spacing\n      lineHeight: 1, // define the line height\n      space: true, // define if the output text should have empty lines on top and on the bottom\n      maxLength: '0', // define how many character can be on one line\n      gradient: false, // define your two gradient colors\n      independentGradient: false, // define if you want to recalculate the gradient for each new line\n      transitionGradient: false, // define if this is a transition between colors directly\n      env: 'node' // define the environment CFonts is being executed in\n    });\n  }\n\n  /**\n   * @param {Array} - Array of reports\n   * @returns {Error} - Stop execution and print error\n   * @private\n   * @memberof Logger\n   * @description Print result message to console\n   */\n  _logResult(result) {\n    if (!result.some(r => r.report.length))\n      return this._logSuccess('\\nüëç  No SEO defects detected.\\n');\n\n    this._logInfo('\\nüöÄ  Issue report');\n\n    for (const item of result) {\n      this._logInfo(`\\nSource: ${item.source.trim()}`);\n      this._logError(`${item.report.join('\\n')}`);\n    }\n\n    this._logSuccess(\n      '\\n-------- üöÄ Finished! --------\\nThanks for using Seo Analyzer!\\n'\n    );\n\n    return process.exit(1); // Stop process in terminal\n  }\n\n  /**\n   * @param {String} - Error object\n   * @returns {String} - Stop execution and print error\n   * @private\n   * @memberof Logger\n   * @description Print error message to console\n   */\n  _logError(error) {\n    console.error(`${_colors.red(error)}`);\n  }\n\n  /**\n   * @param {String} - Error object\n   * @returns {String} - Stop execution and print error\n   * @private\n   * @memberof Logger\n   * @description Print error message to console\n   */\n  _logInfo(info) {\n    console.log(`${_colors.yellow(info)}`);\n  }\n\n  /**\n   * @param {String} - Message\n   * @returns {String} - Print formatted message to console\n   * @private\n   * @memberof Logger\n   */\n  _logSuccess(success) {\n    console.log(`${_colors.green(success)}`);\n  }\n}\n\nexport default Logger;\n","import axios from 'axios';\nimport sitemaps from 'sitemap-stream-parser';\nimport cliProgress from 'cli-progress';\nimport _colors from 'colors';\nimport Logger from './logger';\n\nclass Scanner {\n  constructor(logger) {\n    this.logger = logger ?? new Logger();\n    this.consoleProgressBar = this.logger.level <= 4 && new cliProgress.Bar({\n      format:\n        'Processing... |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Pages',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.inputUrl = '';\n    this.ignoreUrls = '';\n  }\n\n  /**\n   * @param {Number} port - Port for the server to listen on\n   * @returns {Array} - Array of html doms\n   * @description - Scrapes the site and returns the html doms\n   */\n  async run(port, urls, sitemap) {\n    this.inputUrl = `http://localhost:${port}`;\n    this.ignoreUrls = urls;\n    const links = await this._getLinksFromSitemap(sitemap);\n    const htmlDoms = await this._getHtmlDomFromLinks(links);\n    return htmlDoms;\n  }\n\n  /**\n   * Get the links from the sitemap\n   * @returns {Array} - Array of links\n   * @description - Scrapes the sitemap and returns the links\n   */\n  _getLinksFromSitemap(sitemap) {\n    this.logger.info(`üöÄ  Get sitemap from ${this.inputUrl}\\n`);\n    return new Promise(resolve => {\n      const formattedUrl = `${this.inputUrl}/${sitemap}`;\n      const links = [];\n      sitemaps.parseSitemaps(\n        formattedUrl,\n        link => {\n          // Ignore the links that are in the ignore list\n          const path = link.replace(/^.*\\/\\/[^/]+/, '');\n          if (this.ignoreUrls.indexOf(path) === -1) {\n            links.push(this._formatLink(link));\n          }\n        },\n        err => {\n          if (err) {\n            this.logger.error('‚ùå  Sitemap not found\\n', 1);\n          } else {\n            if (!links.length) {\n              this.logger.error('‚ùå  Links not found\\n', 1);\n            } else {\n              this.logger.success('‚úÖ  Done\\n');\n              resolve(links);\n            }\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Formats the link to be used in axios\n   * @param {String} link\n   * @returns {String} - Formatted link > http://localhost:{port}/link\n   */\n  _formatLink(link) {\n    const result = link.replace(/^.*\\/\\/[^/]+/, this.inputUrl);\n    return result;\n  }\n\n  /**\n   * Sleep for the given time in milliseconds\n   * @param {Number} ms\n   * @returns {Promise}\n   */\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get the html doms from the links\n   * @param {Array} links - Array of links\n   * @returns {Array} - Array of html doms\n   * @description - Scrapes the links and returns the html doms\n   */\n  async _getHtmlDomFromLinks(links) {\n    const htmlDoms = [];\n    const promises = [];\n    this.logger.info('üöÄ  Parsing HTML\\n');\n\n    // Start the progress bar\n    this.logger.level <= 4 && this.consoleProgressBar.start(links.length, 0);\n\n    for (const link of links) {\n      promises.push(\n        axios\n          .get(link)\n          .then(res => {\n            if (res && res.status === 200) {\n              htmlDoms.push({ source: link, text: res.data });\n            }\n          })\n          .catch(error => {\n            const err =\n              (error && error.response && error.response.status) || 500;\n            this.logger.error(`Error: ${error} - ${link}`);\n            this.logger.error(\n              `\\n${_colors.yellow('==>')} ${_colors.white(link)} ${_colors.red(\n                err\n              )}`\n            );\n          })\n          .finally(() => {\n            this.logger.level <= 4 && this.consoleProgressBar.increment();\n          })\n      );\n      await this.sleep(500);\n    }\n\n    return Promise.all(promises).then(() => {\n      // // Stop the progress bar\n      this.logger.level <= 4 && this.consoleProgressBar.stop();\n      return htmlDoms;\n    });\n  }\n}\n\nexport default Scanner;\n","import fs from 'fs';\nimport path from 'path';\nimport { JSDOM, VirtualConsole } from 'jsdom';\nimport cliProgress from 'cli-progress';\nimport _colors from 'colors';\nimport Logger from './logger';\nimport Scraper from './scraper';\n\n/**\n * @typedef {Array<JSDOM>} ListDom \n */\n\nclass Input {\n  constructor(logger) {\n    this.logger = logger ?? new Logger();\n    this.scraper = new Scraper(this.logger);\n    this.consoleProgressBar = this.logger.level <= 4 && new cliProgress.Bar({\n      format:\n        'Processing... |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Folders',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.badType =\n      'The inputFiles function takes an array only [\"index.html\", \"...\", \"...\"]';\n    this.emptyList =\n      'You need to pass an array to the inputFiles function [\"index.html\", \"...\", \"...\"]';\n    this.ignoreFolders = [];\n    this.ignoreFiles = [];\n  }\n\n  /**\n   * Get the html from files\n   * @param {Array<string>} files [<string>, <string>, ...]\n   * @param ignoreFiles\n   * @returns {Promise<ListDom>} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   * @memberof Input\n   */\n  async files(files = [], ignoreFiles = []) {\n    if (!Array.isArray(files) || !files.length)\n      this.logger.error('‚ùå  The \"inputFiles\" method expects an array of files.\\n', true);\n\n    if (!Array.isArray(ignoreFiles))\n      this.logger.error('‚ùå  The \"ignoreFiles\" method expects an array of ignore files.\\n', true);\n\n    this.logger.info('\\nüöÄ  Parsing files\\n');\n    if (files.length === 0) {\n      this.logger.error(this.emptyList);\n    }\n    if (!Array.isArray(files)) {\n      this.logger.error(this.badType);\n    }\n    this.ignoreFiles = ignoreFiles;\n    const listTexts = await this._getHtml(files);\n    const listDOM = await this.getDom(listTexts);\n    return listDOM;\n  }\n\n  /**\n   * Get the html from files in folders\n   * @param {Array<string>} folders [<string>, <string>, ...]\n   * @param ignoreFolders\n   * @param ignoreFiles\n   * @returns {Promise<ListDom>} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   * @memberof Input\n   */\n  async folders(folders = [], ignoreFolders = [], ignoreFiles = []) {\n    if (!Array.isArray(folders) || !folders.length)\n      this.logger.error('‚ùå  The \"inputFolders\" method expects an array of folders.\\n', true);\n\n    if (!Array.isArray(ignoreFolders))\n      this.logger.error('‚ùå  The \"ignoreFolders\" method expects an array of ignore folders.\\n', true);\n\n    this.logger.info('üöÄ  Parsing folders\\n');\n\n    // Start the progress bar\n    this.logger.level <= 4 && this.consoleProgressBar.start(folders.length, 0);\n    this.ignoreFolders = ignoreFolders;\n    this.ignoreFiles = ignoreFiles;\n\n    const files = await this._getFilesFromFolders(folders);\n    const listDOM = await this.files(files, ignoreFiles);\n    return listDOM;\n  }\n\n  /**\n   * Get the DOM from urls\n   * @returns {Promise<ListDom>} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   * @param port\n   * @param ignoreUrls\n   */\n  async spa(port, ignoreUrls = [], sitemap) {\n    const listTexts = await this.scraper.run(port, ignoreUrls, sitemap);\n    const htmlDoms = await this.getDom(listTexts);\n    return htmlDoms;\n  }\n\n  /**\n   * Get all files from folders\n   * @param {Array<string>} folders [<string>, <string>, ...]\n   * @returns {Promise<Array<string>>} [<string>, <string>, ...]\n   * @private\n   * @example ['html', 'dist', 'src']\n   */\n  async _getFilesFromFolders(folders = []) {\n    const files = [];\n    for (const folder of folders) {\n      const result = await this._getFilesFromFolder(folder);\n\n      // Update the progress bar\n      this.logger.level <= 4 && this.consoleProgressBar.increment();\n\n      files.push(...result);\n    }\n\n    // Stop the progress bar\n    this.logger.level <= 4 && this.consoleProgressBar.stop();\n\n    if (!files.length) this.logger.error('\\n‚ùå  No files found.\\n', true);\n\n    return files;\n  }\n\n  /**\n   * Get files from folder\n   * @param {string} folder\n   * @returns {Promise<Array<string>>} [<string>, <string>, ...]\n   * @private\n   * @memberof Input\n   */\n  _getFilesFromFolder(folder = '') {\n    try {\n      const entryPaths = fs\n        .readdirSync(folder)\n        .map(entry => path.join(folder, entry));\n      const filePaths = entryPaths.filter(\n        entryPath =>\n          fs.statSync(entryPath).isFile() && path.extname(entryPath) === '.html'\n      );\n      const dirPaths = entryPaths.filter(\n        entryPath =>\n          !filePaths.includes(entryPath) && fs.statSync(entryPath).isDirectory()\n      );\n      const dirFiles = dirPaths\n        .filter(p => !this.ignoreFolders.includes(p))\n        .reduce(\n          (prev, curr) => prev.concat(this._getFilesFromFolder(curr)),\n          []\n        );\n      return [...filePaths, ...dirFiles];\n    } catch (error) {\n      this.logger.error(`\\n\\n‚ùå Folder \"${folder}\" not found\\n`);\n      return [];\n    }\n  }\n\n  /**\n   * Get the html from file\n   * @param {Array<string>} files [<string>, <string>, ...]\n   * @returns {Promise<Array<string>>} ['<html><body>...</body></html>', '<html><body>...</body></html>', ...]\n   * @private\n   * @memberof Input\n   */\n  _getHtml(files) {\n    const listTexts = [];\n    const proccess = this.logger.level <= 4 && new cliProgress.Bar({\n      format:\n        'Processing... |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Sources',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n\n    // Start the progress bar\n    this.logger.level <= 4 && proccess.start(files.length, 0);\n\n    files.forEach(file => {\n      if (this.ignoreFiles.includes(file)) return;\n      try {\n        const text = fs.readFileSync(file, 'utf8');\n        listTexts.push({ source: file, text });\n        this.logger.level <= 4 && proccess.increment();\n      } catch (error) {\n        this.logger.level <= 4 && proccess.increment();\n        this.logger.error(`\\n\\nFile \"${file}\" not found\\n`);\n      }\n    });\n    this.logger.level <= 4 && proccess.stop();\n    if (!listTexts.length) this.logger.error('\\n‚ùå  No files found.\\n', true);\n    return listTexts;\n  }\n\n  /**\n   * Transform html to DOM\n   * @param {Array<{text: string, source: string}>} list [{text: <string>, source: <string>}, {text: <string>, source: <string>}, ...]\n   * @returns {Promise<ListDom>} [{ window: {}, document: {}, ... }, { window: {}, document: {}, ... }, ...]\n   * @private\n   */\n  getDom(list) {\n    const doms = [];\n    const proccess = this.logger.level <= 4 && new cliProgress.Bar({\n      format:\n        'Handling html |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Sources',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.logger.info('\\nüöÄ  Getting DOM from HTML\\n');\n    this.logger.level <= 4 && proccess.start(list.length, 0);\n    // NOTE: https://github.com/jsdom/jsdom/issues/2177#issuecomment-379212964\n    const virtualConsole = new VirtualConsole();\n    list.forEach(item => {\n      let dom = new JSDOM(item.text, { virtualConsole });\n      doms.push({ source: item.source, dom });\n      this.logger.level <= 4 && proccess.increment();\n    });\n\n    this.logger.level <= 4 && proccess.stop();\n    return doms;\n  }\n}\n\nexport default Input;\n","import cliProgress from 'cli-progress';\nimport _colors from 'colors';\n\nimport Logger from './logger';\n\n/**\n * Results returned by analyzer\n * @typedef {Array<{source: string, report: string}>} AnalyzerResult\n */\n\nclass Analyzer {\n  constructor(logger) {\n    this.logger = logger ?? new Logger();\n    this.consoleProgressBar = this.logger.level <= 4 && new cliProgress.Bar({\n      format:\n        'Running rules |' +\n        _colors.green('{bar}') +\n        '| {percentage}% || {value}/{total} Rules',\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n      hideCursor: true\n    });\n    this.badType =\n      'The inputFiles function takes an array only [\"index.html\", \"...\", \"...\"]';\n    this.emptyList =\n      'You need to pass an array to the inputFiles function [\"index.html\", \"...\", \"...\"]';\n  }\n\n  /**\n   * Run analyzer for a list of doms\n   * @param {JSDOM<array>} doms - The html dom list to run the rule on\n   * @param {Array} rules - The rules to run\n   * @returns {AnalyzerResult} - Array of error result [{ source, report }, { source, report }, { source, report }]\n   */\n  async run(inputData, rules) {\n    if (inputData.length === 0) {\n      this.logger.error(this.emptyList);\n    }\n    if (!Array.isArray(inputData)) {\n      this.logger.error(this.badType);\n    }\n    const report = await this._startAnalyzer(inputData, rules);\n    return report;\n  }\n\n  /**\n   * @param {Array} dataList - html doms\n   * @param {Array} rules - List rulers\n   * @returns {AnalyzerResult} - Array of reports [{source, report}, {source, report}, {source, report}]\n   */\n  async _startAnalyzer(dataList, rules) {\n    const result = [];\n    for (const item of dataList) {\n      this.logger.info(\n        `\\n${_colors.blue('==>')} Analysis ${_colors.white(item.source)}`\n      );\n\n      const report = await this._analyzeDOM(item.dom, rules);\n\n      if (report && report.length) {\n        result.push({\n          source: item.source,\n          report\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Run analyzer for a single dom\n   * @param {*} dom - The html dom element to run the rule on\n   * @param {*} rules - The rules to run\n   * @returns {Array<string>} - Array of error result ['error', 'error', 'error']\n   */\n  async _analyzeDOM(dom, rules) {\n    const result = [];\n    // Start the progress bar\n    this.logger.level <= 4 && this.consoleProgressBar.start(rules.length, 0);\n\n    for (const item of rules) {\n      let report = null;\n      try {\n        report = await item.rule(dom, item.options);\n      } catch (error) {\n        report = error;\n      }\n      if (Array.isArray(report)) {\n        result.push(...report);\n      } else {\n        if (report) {\n          result.push(report);\n        }\n      }\n\n      // Update the progress bar\n      this.logger.level <= 4 && this.consoleProgressBar.increment();\n    }\n\n    // Stop the progress bar\n    this.logger.level <= 4 && this.consoleProgressBar.stop();\n\n    return result;\n  }\n}\n\nexport default Analyzer;\n","import Analyzer from './analyzer';\n\nclass Output {\n  constructor(logger) {\n    this.analyzer = new Analyzer(logger);\n  }\n\n  /**\n   * @param {Array} data - List of files and folders\n   * @param {Array} rules - List of rules\n   * @returns {Promise} - Returns js object [{source, report}, ...]\n   */\n  async object(inputData, rules) {\n    const report = await this.analyzer.run(inputData, rules);\n    return report;\n  }\n\n  /**\n   * @param {Array} data - List of files and folders\n   * @param {Array} rules - List of rules\n   * @returns {JSON} - Returns json [{\"source\", \"report\"}, ...]\n   */\n  async json(inputData, rules) {\n    const report = await this.analyzer.run(inputData, rules);\n    return JSON.stringify(report, null, 2);\n  }\n}\n\nexport default Output;\n","import express from 'express';\nimport path from 'path';\nimport Logger from './modules/logger';\n\nconst app = express();\n\n/**\n * Start the server on the given port and use static files from the given path.\n * @param {String} folder - The path to the static files.\n * @param {Number} port - The port to start the server on.\n */\nexport function startServer(folder, port) {\n  const logger = new Logger();\n\n  app.use(express.static(folder));\n\n  // sendFile will go here\n  app.get('/', (req, res) => {\n    res.sendFile(path.join(__dirname, '/index.html'));\n  });\n\n  app.listen(port);\n\n  logger.info(`üöÄ  Server started on port ${port}\\n`);\n\n  logger.success('‚úÖ  Done\\n');\n}\n","import express from 'express';\nimport Logger from './logger';\nimport Input from './input';\n\nclass NextServer {\n  constructor(logger) {\n    this.logger = logger ?? new Logger();\n    this._input = new Input(logger);\n    this.app = {};\n    this.handle = {};\n    this.status = {};\n    this.port = parseInt(process.env.PORT, 10) || 3000;\n  }\n\n  async setup() {\n    const { default: next } = await import('next');\n    this.app = next({ dev: false });\n    this.handle = this.app.getRequestHandler();\n  }\n\n  /**\n   * Run Next js server\n   * @returns {Promise<unknown>}\n   */\n  run() {\n    return new Promise((resolve, reject) => {\n      this.app.prepare()\n        .then(() => {\n          const server = express();\n\n          server.all('*', (req, res) => {\n            return this.handle(req, res);\n          });\n\n          server.listen(this.port, err => {\n            if (err) throw err;\n            this.logger.info(`üöÄ  Ready on http://localhost:${this.port}\\n`);\n            resolve({ status: 'Active' });\n          });\n        })\n        .catch(ex => {\n          this.logger.error('‚ùå  Error Starting Server\\n');\n          console.error(ex.stack);\n          process.exit(1);\n          reject(new Error('Error Starting Server'));\n        });\n    });\n  }\n\n  /**\n   * Run server for next js.\n   * Get the DOM from urls\n   * @param {number} port\n   * @param ignoreUrls\n   * @returns {Promise<Promise.Array>}\n   */\n  async inputSSR(port, ignoreUrls = [], sitemap) {\n    this.port = port;\n    this.status = await this.run();\n    const inputResult = this._input.spa(this.port, ignoreUrls, sitemap);\n    return inputResult;\n  }\n}\n\nexport default NextServer;\n","import defaultRules from './rules/index';\n\nimport Input from './modules/input';\nimport Output from './modules/output';\nimport Logger from './modules/logger';\n\nimport { startServer } from './server';\n\n/**\n * @typedef {import('./modules/analyzer').AnalyzerResult} AnalyzerResult\n */\n\nclass SeoAnalyzer {\n  /**\n   * @param {object} options - The options object.\n   * @param {boolean} [options.verbose=true] - A flag indicating whether verbose mode is enabled.\n   * @returns {SeoAnalyzer}\n   */\n  constructor({ verbose = true }) {\n    this._logger = new Logger(verbose ? 'default' : 'error');\n    this._input = new Input(this._logger);\n    this._output = new Output(this._logger);\n    this._nextServer = null;\n    this._inputData = [];\n    this._defaultRules = defaultRules;\n    this._rules = [];\n    this._ignoreFolders = [];\n    this._ignoreFiles = [];\n    this._ignoreUrls = [];\n    return this;\n  }\n\n  // --------- Ignore methods --------- //\n  /**\n   * List of files to ignore.\n   * @param {Array<string>} files \n   * @returns {SeoAnalyzer}\n   */\n  ignoreFiles(files) {\n    this._ignoreFiles = files;\n    return this;\n  }\n\n  /**\n   * List of directories to ignore.\n   * @param {Array<string>} folders \n   * @returns {SeoAnalyzer}\n   */\n  ignoreFolders(folders) {\n    this._ignoreFolders = folders;\n    return this;\n  }\n\n  /**\n   * List of urls to be ignored\n   * @param {Array<string>} urls to be ignored \n   * @returns {SeoAnalyzer}\n   */\n  ignoreUrls(urls) {\n    this._ignoreUrls = urls;\n    return this;\n  }\n\n  // ------- Input methods ------- //\n  /**\n   * Files to analyze\n   * @param {Array<string>} files \n   * @returns {Promise<SeoAnalyzer>}\n   */\n  async inputFiles(files) {\n    if (this._inputData.length !== 0) return this;\n    this._logger.printTextToConsole('SEO Analyzer');\n    this._inputData = await this._input.files(files, this._ignoreFiles);\n    return this;\n  }\n\n  /**\n   * Directories to analyze\n   * @param {Array<string>} folders \n   * @returns {Promise<SeoAnalyzer>}\n   */\n  async inputFolders(folders) {\n    if (this._inputData.length !== 0) return this;\n    this._logger.printTextToConsole('SEO Analyzer');\n    this._inputData = await this._input.folders(\n      folders,\n      this._ignoreFolders,\n      this._ignoreFiles\n    );\n    return this;\n  }\n\n  /**\n   * Spa folder to analyze\n   * @param {Array<string>} folder \n   * @returns {Promise<SeoAnalyzer>}\n   */\n  async inputSpaFolder(folder, sitemap='sitemap.xml', port = 9999) {\n    if (!this._inputData) return this;\n    this._logger.printTextToConsole('SEO Analyzer');\n    // Run server for spa\n    startServer(folder, port);\n    this._inputData = await this._input.spa(port, this._ignoreUrls, sitemap);\n    return this;\n  }\n\n  /**\n   * Scan Next server\n   * @param {string} sitemap Path to sitemap in xml format\n   * @param {number} port Port Next server listens on\n   * @returns {Promise<SeoAnalyzer>}\n   */\n  async inputNextJs(sitemap = 'sitemap.xml', port = 3000) {\n    if (!this._inputData) return this;\n    if (!this._nextServer) {\n      const { default: NextServer }  = await import('./modules/next-server');\n      this._nextServer = new NextServer(this._logger);\n      await this._nextServer.setup();\n    }\n    this._logger.printTextToConsole('SEO Analyzer');\n    this._inputData = await this._nextServer.inputSSR(port, this._ignoreUrls, sitemap);\n    return this;\n  }\n\n  /**\n   * Input plain HTML strings in {text, source} format to analyze\n   * @param {Array<{text: string, source: string}>} inputHTMLs `text` is the plain html, `source` is an identifier such a URI\n   * @returns {SeoAnalyzer}\n   */\n  inputHTMLStrings(inputHTMLs) {\n    if (this._inputData.length !== 0) return this;\n    if (!inputHTMLs || !inputHTMLs.length \n      || inputHTMLs.some(html => typeof html.text === 'undefined' || typeof html.source === 'undefined')) {\n      const error = `Invalid input ${inputHTMLs}`;\n      this._logger.error(error);\n      throw error;\n    }\n    this._logger.printTextToConsole('SEO Analyzer');\n    this._inputData = this._input.getDom(inputHTMLs);\n    return this;\n  }\n\n  // --------- Add Rule --------- //\n  /**\n   * Adds a rule to the SEO analyzer.\n   * @param {string|Function} rule The default rule or a custom rule function.\n   * @param {object} [options={}] Additional options for the rule.\n   * @returns {this} The SEO analyzer instance for method chaining.\n   */\n  addRule(rule, options = {}) {\n    if (typeof rule === 'string') {\n      if (rule in defaultRules) {\n        this._rules.push({ rule: defaultRules[rule], options });\n      } else {\n        this._logger.error(`\\n\\n‚ùå  Rule \"${rule}\" not found\\n`, 1);\n      }\n    } else if (typeof rule === 'function') {\n      this._rules.push({ rule, options });\n    } else {\n      this._logger.error('\\n\\n‚ùå  Rule must be a function or a string\\n', 1);\n    }\n    return this;\n  }\n\n  // ------- Output methods ------- //\n  /**\n   * Logs object to console asynchronously and returns itself\n   * @returns {SeoAnalyzer}\n   */\n  outputConsole() {\n    (async () => {\n      const json = await this._output.object(this._inputData, this._rules);\n      this._logger.result(json, true);\n    })();\n    return this;\n  }\n\n  /**\n   * Returns itself and calls a callback on the output's json string\n   * @param {function(string): void}\n   * @returns {SeoAnalyzer}\n   */\n  outputJson(callback) {\n    (async () => {\n      const json = await this._output.json(this._inputData, this._rules);\n      callback(json);\n    })();\n    return this;\n  }\n\n  /**\n   * Returns the JSON output asynchronously\n   * @returns {Promise<string>}\n   */\n  async outputJsonAsync() {\n    return this._output.json(this._inputData, this._rules);\n  }\n\n  /**\n   * Returns itself and calls a callback on the output's object\n   * @param {function(AnalyzerResult): void}\n   * @returns {SeoAnalyzer}\n   */  \n  outputObject(callback) {\n    (async () => {\n      const obj = await this._output.object(this._inputData, this._rules);\n      callback(obj);\n    })();\n    return this;\n  }\n\n  /**\n   * Returns the object asynchronously\n   * @returns {Promise<AnalyzerResult>}\n   */\n  async outputObjectAsync() {\n    return this._output.object(this._inputData, this._rules);\n  }\n}\n\nexport default SeoAnalyzer;\n"],"names":["defaultRules","titleLengthRule","dom","options","Promise","resolve","title","window","document","querySelector","titleLength","length","min","max","imgTagWithAltAttributeRule","countAlt","countSrc","report","querySelectorAll","forEach","element","alt","src","push","aTagWithRelAttributeRule","count","rel","canonicalLinkRule","href","substr","metaBaseRule","list","names","name","content","metaSocialRule","properties","property","Logger","constructor","level","this","indexOf","result","force","_logResult","error","exit","_logError","process","success","_logSuccess","info","_logInfo","printTextToConsole","text","formattedText","replace","CFonts","say","font","align","colors","background","letterSpacing","lineHeight","space","maxLength","gradient","independentGradient","transitionGradient","env","some","r","item","source","trim","join","console","_colors","red","log","yellow","green","Scanner","logger","consoleProgressBar","cliProgress","Bar","format","barCompleteChar","barIncompleteChar","hideCursor","inputUrl","ignoreUrls","run","port","urls","sitemap","links","_getLinksFromSitemap","_getHtmlDomFromLinks","formattedUrl","sitemaps","parseSitemaps","link","path","_formatLink","err","sleep","ms","setTimeout","htmlDoms","promises","start","axios","get","then","res","status","data","catch","response","white","finally","increment","all","stop","Input","scraper","Scraper","badType","emptyList","ignoreFolders","ignoreFiles","files","Array","isArray","listTexts","_getHtml","getDom","folders","_getFilesFromFolders","spa","folder","_getFilesFromFolder","entryPaths","fs","readdirSync","map","entry","filePaths","filter","entryPath","statSync","isFile","extname","dirFiles","includes","isDirectory","p","reduce","prev","curr","concat","proccess","file","readFileSync","doms","virtualConsole","VirtualConsole","JSDOM","Analyzer","inputData","rules","_startAnalyzer","dataList","blue","_analyzeDOM","rule","Output","analyzer","object","json","JSON","stringify","app","express","_input","handle","parseInt","PORT","setup","default","next","import","dev","getRequestHandler","reject","prepare","server","req","listen","ex","stack","Error","inputSSR","verbose","_logger","_output","_nextServer","_inputData","_defaultRules","_rules","_ignoreFolders","_ignoreFiles","_ignoreUrls","inputFiles","inputFolders","inputSpaFolder","use","static","sendFile","__dirname","startServer","inputNextJs","NextServer","nextServer","inputHTMLStrings","inputHTMLs","html","addRule","outputConsole","outputJson","callback","outputJsonAsync","outputObject","obj","outputObjectAsync"],"mappings":"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"}